buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("com.google.cloud.tools:appengine-gradle-plugin:1.+")
    }
}

plugins {
    id "io.franzbecker.gradle-lombok" version "3.2.0"
    id "org.springframework.boot" version "2.2.2.RELEASE"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "java"
    id "idea"
    id "war"  // standard Web Archive plugin
    id "net.ltgt.apt" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id "com.github.ben-manes.versions" version "0.27.0"
    id "org.jetbrains.kotlin.jvm" version "1.3.61"
}

apply plugin: "com.google.cloud.tools.appengine"  // App Engine tasks

group = "de.alpharogroup"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = 1.8     // App Engine Flexible uses Java 8
targetCompatibility = 1.8     // App Engine Flexible uses Java 8

repositories {
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots" // SNAPSHOT repository (if needed)
    }
    mavenCentral()
    jcenter()
}

ext {
    lombokVersion = "1.18.10"
    genericMapperVersion = "2.2"
    jjwtVersion = "0.10.7"
    authApiVersion = "5.3"
    authVersion = "5.4"
    mysticCryptVersion = "7.3"
    entApiVersion = "1.6"
    entCoreVersion = "1.9"
    pgEnumUsertypeVersion = "1"
    springfoxSwaggerVersion = "2.9.2"
    springBootExtensionsVersion = "1.3"
    servletKtExtensionsVersion = "1.1"
    springToolExtensionsVersion = "1.6-SNAPSHOT"
    xmlExtensionsVersion = "7.2"
    sillyCollectionsVersion = "5.8"
}

dependencies {
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    compile("com.google.appengine:appengine-api-1.0-sdk:+")
    providedCompile("javax.servlet:javax.servlet-api:3.1.0")
    compile("jstl:jstl:1.2")
    implementation("de.alpharogroup:generic-mapper:$genericMapperVersion")
    implementation("io.jsonwebtoken:jjwt-api:$jjwtVersion")
    implementation("io.jsonwebtoken:jjwt-impl:$jjwtVersion")
    implementation("io.jsonwebtoken:jjwt-jackson:$jjwtVersion")
    implementation("de.alpharogroup:auth-api:$authApiVersion")
    implementation("de.alpharogroup:servlet-kt-extensions:$servletKtExtensionsVersion")
    implementation("de.alpharogroup:auth:$authVersion")
    implementation("de.alpharogroup:mystic-crypt:$mysticCryptVersion")
    implementation("de.alpharogroup:ent-api:$entApiVersion")
    implementation("de.alpharogroup:ent-core:$entCoreVersion")
    implementation("de.alpharogroup:xml-extensions:$xmlExtensionsVersion")
    implementation("de.alpharogroup:silly-collections:$sillyCollectionsVersion")
    implementation("de.alpharogroup:pg-enum-usertype:$pgEnumUsertypeVersion")
    implementation("io.springfox:springfox-swagger2:$springfoxSwaggerVersion")
    implementation("io.springfox:springfox-swagger-ui:$springfoxSwaggerVersion")
    implementation("de.alpharogroup:spring-tool-extensions:$springToolExtensionsVersion")
    implementation("de.alpharogroup:spring-boot-extensions:$springBootExtensionsVersion")
    implementation("org.postgresql:postgresql")
    implementation("org.flywaydb:flyway-core")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
    implementation("org.springframework.security:spring-security-web")
    implementation("org.springframework.security:spring-security-config")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-configuration-processor")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("com.google.appengine:appengine-testing:+")
    testImplementation("com.google.appengine:appengine-api-stubs:+")
    testImplementation("com.google.appengine:appengine-tools-sdk:+")
}

// Always run unit tests
appengineDeploy.dependsOn test
appengineStage.dependsOn test

appengine {  // App Engine tasks configuration
    deploy {   // deploy configuration
        stopPreviousVersion = true  // default - stop the current version
        promote = true              // default - & make this the current version
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    beforeTest { descriptor ->
        logger.lifecycle("test: " + descriptor + "  Running")
    }

    onOutput { descriptor, event ->
        logger.lifecycle("test: " + descriptor + ": " + event.message )
    }
    afterTest { descriptor, result ->
        logger.lifecycle("test: " + descriptor + ": " + result )
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}


